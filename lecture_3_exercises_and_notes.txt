##M.I.T. 6.00SC Lecture 3 Problem Solving
##
##Decrementing function:
##1)Map set of program variables to an integer
##2)starts w/ a non-negative value
##3)when <= 0, loop terminates
##4)decreased each iteration
##
##abs(x) - ans**3
##
##i.e. x = 8
##8 - 0 = 8
##8 - 1**3 = 7
##8 - 2**3 = 0

#exhaustive enumeration: enumerated guesses - tests - "brute force"
#abstract the process: from 'while' loop ==> 'for' loop

x = int(raw_input('Enter an integer: '))
for ans in range(0, abs(x)+1):
    if ans**3 == abs(x):
        break
if ans**3 != abs(x):
    print x, 'is not a perfect cube'
else:
    if x < 0:
        ans = -ans
    print 'Cube root of ' + str(x) + ' is ' + str(ans)

#range(x,y) = (x, x+1,...,y-1) executes one iteration at a time
#break tells it to exit the loop
#note that the program only finds perfect cubes! How about any number?
#approximation - find an answer that 'good enough' - define how good
#ie. find a y s.t. y*y = x+-epsilon

##x = 25
##epsilon = 0.01
##numGuesses = 0
##ans = 0.0
##while abs(ans**2 - x) >= epsilon and ans <= x:
##    ans += 0.00001
##    numGuesses += 1
##print 'numGuesses =', numGuesses
##if abs(ans**2 - x) >= epsilon:
##    print 'Failed on square root of', x
##else:
##    print ans, 'is close to the square root of', x

#note that the actual runtime depends on: the square root
#accuracy: dependant on the value of epsilon
#and the increment!!! let's make it faster> change line 6
#making it faster made it fail... let's find a better algorithm!

#bisection search:
#1)it will cut the space in half
#2)log base/2

##x = 25.0
##epsilon = 0.01
##numGuesses = 0
##low = 0.0
##high = 0.0
##ans = (high + low)/2.0
##while abs(ans**2 - x) >= epsilon and ans <= x:
##    print low, high, ans
##    numGuesses += 1
##    if ans**2 < x:
##        low = ans
##    else:
##        high = ans
##    ans = (high + low)/2.0
##print 'numGuesses =', numGuesses
##print ans, ' is close to the square root of', x

#note that the search space is defined by epsilon
#algorithmic analysis ==> accuracy in predicting the outcome of the code
#ensure that it works for any value

